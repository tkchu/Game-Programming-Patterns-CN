^title 服务定位器
^section 解耦模式

## 意图

*提供服务的全局接入点，而不必让用户和实现它的具体类耦合。*

## 动机

一些游戏中的对象或者系统趋向于到处访问，拜访程序库中机会每一个角落。
很难找到游戏中的一部分永远*不*需要内存分配，记录日志，或者随机数字。
像这样的东西可以被视为整个游戏都需要的*服务*。

在我们的例子中，我们考虑音频。
它不需要接触底层的东西，比如内存分配，但是仍然要接触一大堆游戏系统。
滚石撞击地面（物理）。
NPC狙击手开了一枪，射出子弹（AI）。
用户选择菜单项需要响一声确认（用户界面）。

这些中的每处都需要用像下面的东西调用音频系统：

^code 15

每种都能让我们获得我们想要的，但是我们绊倒在一些微妙的耦合上。
每个调用音频系统的游戏部分直接引用了具体的`AudioSystem`类，和获取它的机制——是静态类还是一个<a class="gof-pattern" href="singleton.html">单例。</a>

这些调用点，当然，需要耦合到*某些东西*上来播放声音，但是让他们可以接触到具体的音频实现，就好像给了一百个陌生人你家的方向，只是为了让他们在门口放一封信。
这不仅仅有关于*隐私*，也关于在你搬家后，需要告诉每个人新地址更加痛苦。

有个更好的解决办法：一本电话薄。
需要接触我们的人们可以在上面查找并找到现在的地址。
当我们搬家时，我们通知电话公司。
他们更新电话薄，每个人都知道了新地址。
事实上，我们甚至无需给出真实的地址。
我们可以列一个转发信箱或者其他“代表”我们的东西。
为了让调用者查询电话薄找到我们，我们需要一个*方便的地方控制我们可以被找到的地方*。

这就是果壳中的服务定位模式——它解耦了需要服务的代码和服务由*谁*提供（那个具体的实现类）以及服务在*哪里*（我们如何获得它的实例）。

## 模式

**服务**类定义了一堆操作的抽象接口。
具体的**服务提供者**实现这个接口。
分离的**服务定位器**提供了通过查询合适的提供者，获取服务的方法，同时隐藏了提供者的具体细节和需要定位它的进程。

## 何时使用

任何你需要能够在程序的每处被能访问的东西时，你就是在找麻烦。
这是<a class="gof-pattern" href="singleton.html">单例</a>模式的主要问题，这个模式也没有什么不同。
我对何时使用服务定位其的最简单的建议是：*少用*。

不要使用全局机制让某些代码接触它需要的代码，首先考虑*将对象传给它*。
这超简单，也明显保持了解耦。这会覆盖你大部分的需求。

*但是……*这里有时候手动传入对象是不可能的或者会让代码难以阅读。
游戏系统，比如日志或内存管理，不该是模块公开API的一部分。
传给渲染代码的参数应该与*渲染*相关，而不是与日志之类的相关。

同样，代表了设施的其他系统通常只有一个。
你的游戏可能只有一个你可以交流的音频设备或者显示设备。
这是周围环境的属性，所以加入穿透十层方法的复杂调用会为代码增加不必要的复杂度。

这些例子中，这个模式可以帮忙。
就像我们将看到的那样，它是单例模式更加灵活，更加可配置的子孙。
当用得<span name="well">好</span>，它能以很小的运行时开销，获得更多的灵活性。

<aside name="well">

相反，当用得不好，它带来了所有单例模式的负面以及更多的运行时开销。

</aside>

## 记住

使用服务定位的核心难点是它将从属——在两块代码之间的一点耦合——推迟到运行时再连接。
这给了更多的灵活度，但是付出的代价是更难在阅读代码时理解你依赖的是什么。

### 服务必须真的可定位

通过使用单例或者静态类，我们需要的实例不可能*不*可用。
调用代码保证了它就在那里。但是由于这个模式*定位*了服务，我们也许要处理失败的情况。
幸运的是，我们之后会介绍一种处理它的策略，保证我们总是在需要时能获得*某些*服务。

### 服务不知道谁在定位它

由于定位器是全局可获得的，任何游戏中的代码都可以请求服务，然后使用它。
这就意味着服务必须在任何环境下正确工作。
举个例子，只能在游戏循环的模拟部分使用，而不能在渲染部分使用的类也许不能作为服务——不能保证在正确的时间使用它。
所以，如果你的类期望只在特定上下文中使用，不用这个模式将它暴露给整个世界更安全。

## 示例代码

重回我们的音频问题，让我们将代码通过服务定位器暴露给代码库的剩余部分来解决问题。

### 服务

我们从音频API开始。这是我们服务要暴露的接口：

^code 9

当然，一个真实的音频引擎比这复杂的多，但这展示了基本的理念。
重要的是它是没有实现绑定的抽象接口类。

### 服务提供者

只有它自己，我们的音频接口不是很有用。
我们需要具体实现。这本书不是关于如何为游戏主机写音频代码，所以你得想象这些函数中有实际的代码，但你知道什么意思：

^code 10

现在我们有接口和实现了。
剩下的部分是服务定位器——那个将两者绑在一起的类

### 一个简单的定位器

这里的实现是你可以定义的最简单的服务定位器：

<span name="di"></span>

^code 1

<aside name="di">

这里用的技术被称为*依赖注入*，一个对简单思路的笨拙行话。
假设你有一个类依赖另一个。
在例子中，我们的`Locator`类需要`Audio`的实例。
通常，定位器负责构造那个实例。
依赖注入与之相反，它说外部代码负责向对象*注入*它需要的依赖。

</aside>

这个静态的`getAudio()`函数完成了定位。
我们可以从代码库的任何地方调用它，它会给我们一个`Audio`服务实例使用：

^code 5

它“定位”的方式十分简单——依靠在使用服务前注册服务提供者的外部代码。
当游戏开始时，它调用一些这样的代码：

^code 11

这里需要注意的关键部分是调用`playSound()`的代码没有意识到任何具体的`ConsoleAudio`类；
它只知道抽象的`Audio`接口。
同样重要的，*定位器*类都没有与具体的服务提供者耦合。
代码中*唯一*知道哪个具体类提供了服务的地方是初始化代码。

这里有更高层次的解耦：
`Audio`接口没有意识到它通过服务定位器来接受访问。
据它所知，它只是常见的抽象基类。
这很有用，因为这意味着我们可以将这个模式应用到*现有的*类上，这个类无需为此特殊设计。
这与<a class="gof-pattern" href="singleton.html">单例</a>形成了对比，那个会影响“服务”类本身的设计。

### 一个空服务

我们现在的实现很简单，而且也很灵活。
但是它有巨大的缺点：如果我们在提供者注册<span name="temporal">前</span>使用服务，它会返回`NULL`。
如果调用代码没有检查，我们就让游戏崩溃了。

<aside name="temporal">

我有时听说这被称为“暂时耦合”——两块分离的代码必须以正确的顺序调用，才能让程序正确运行。
有状态的软件都有某种程度上的这种情况，但是就像其他耦合一样，减少暂时耦合让代码库更容易管理。

</aside>

幸运的是，还有一种设计模式叫做“空对象”，我们可用它处理这个。
这里的基本思路就是在我们没能找到或者没有让程序以正确运行的顺序调用时，我们不返回`NULL`，而是返回一个特定的，实现了请求对象一样的接口的对象。它的实现什么也不做，但是它允许代码接受对象，保证代码安全运行，好像代码收到了“真的”服务对象。

为了使用它，我们定义另一个“空”服务提供者：

^code 7

就像你看到的那样，它实现了服务接口，但是没有干任何实事。
现在，我们将我们的定位器改成这样：

<span name="ref"></span>

^code 8

<aside name="ref">

你也许注意我们用引用而不是指针返回服务。
由于C++中的引用（理论上）永远不是`NULL`，返回引用是提示用户他们总可以期待获得一个合法的对象。

另一件值得注意的事是我们在`provide()`而不是访问者中检查`NULL`。
那需要我们我们早早调用`initialize()`保证定位器可以正确默认找到空提供者。
作为回报，它将分支移出了`getAudio()`，这在每次使用服务时节约了检查开销。

</aside>

调用代码永远不知道“真正的”服务没找到，也不必担心处理`NULL`。
这保证它永远能获得有效的对象。

这对*故意*找不到服务也很有用。
如果我们想暂时<span name="disable">停用</span>系统，现在有更简单的方式来做了：
简单的不要为服务注册提供者，定位器会默认提供空提供者。

<aside name="disable">

关闭音频在开发中是很便利的。它释放了一些内存和CPU循环。
更重要的，但当你在响声初起时进入debugger，它能防止你的鼓膜爆裂。没有什么东西比二十毫秒的最高音量尖叫循环更你让你血液逆流了。

</aside>

### 日志装饰器

现在我们的系统非常强健了，让我们讨论这个模式允许的另一个好处——装饰服务。
我会用例子解释。

在开发过程中，记录有趣事情发生的小小日志系统可助你查出游戏引擎正处于何种状态。
如果你在处理AI，你要知道哪个实体改变了AI状态。
如果你是音频程序员，你也许想记录每个播放的声音，这样你可以检查它们是否是以正确的顺序触发。

通常的解决方案是向代码中丢一些对`log()`函数的调用。
不幸的是，这用一个问题代替了另一个——现在我们有*太多*日志。
AI程序员不关心什么时候声音在播放，声音程序员也不在乎AI状态转换，但是它们现在都得在对方的日志中跋涉。

理念上，我们应该可以选择性的为关心的事物启动日志，而游戏成品中，不应该有日志。
如果有条件地为不同的系统记录日志被改写为服务，那么我们就可以用<a class="gof-pattern" href="http://www.c2.com/cgi/wiki?DecoratorPattern">装饰器</a>模式。让我们定义另一个音频服务提供者实现如下：

^code 12

就像你看到的那样，它包裹了另一个音频提供者，暴露同样的接口。
它将实际的音频行为转发给内部的提供者，但它也同时记录每个音频调用。
如果程序员需要启动音频日志，它们调用这个：

^code 13

现在，任何在音频服务照旧运行前，对它的调用都会记录下去。
同时，当然，它和我们的空服务也很好的相处，所以你能*启用*音频，也能继续记录如果声音被启用*将会*播放的声音。

## 设计决策

我们包含了一种典型的实现，但是基于对核心问题的回答，这里还有很多实现方式：

### 服务是如何被定位的？

 *  **外部代码注册它：**

    这是我们样例代码中定位服务使用的机制，这也是我在游戏中最常见的设计方式：

     *  *简单快捷。*`getAudio()`函数简单的返回指针。这通常被编译器内联了，所以我们几乎没有付出性能损失就获得了很好的抽象层。

     *  *可以控制提供者是如何被构建的。*想想一个接触游戏控制器的服务。我们使用两个具体的提供者：一个是给常规游戏，另一个给在线游戏。在线的那个跨越网络提供控制器的输入，这样，对于游戏的其他部分，远程玩家好像在使用本地控制器。

        为了让其工作，在线的具体提供者需要知道其他远程玩家的IP。如果定位器本身构建对象，它怎么知道传进来什么？`Locator`类不知道任何有关在线的东西，就更不用说其他用户的IP地址了。

        外部注册的提供者闪避了这个问题。定位器不再构造类，游戏的网络代码实例化特定的在线特定服务提供器，传给它需要的IP地址。然后它把服务提供给定位器，定位器只知道服务的抽象接口。

     *  *可以在游戏运行时改变服务。*我们也许不会在最终的游戏版本中使用这个，但是这是个在开发过程中有效的技巧。举个例子，在测试时，即使游戏正在运行，我们可以切换音频服务为早先提到的空服务来临时地关闭声音。

     *  *定位器依赖外部代码。*这就是缺点。任何接触服务的代码必须假定某处的代码已经注册过了。如果没有做初始化，我们要么会崩溃，要么有服务迷之不工作。

 *  **在编译时绑定：**

    这里的思路是使用预处理器，在编译时间处理“位置”。就像这样：

    ^code 2

    像这样定位服务暗示了一些事情：

     *  *快速。*由于所有的工作都在编译时做完了，没有东西需要在运行时做了。编译器很可能会内联`getAudio()`调用，给我们了尽可能快的解决方案。

     *  *可以保证服务是可用的。*由于定位器现在拥有服务，在编译时就选择了，我们可以保证如果游戏编译完成，我们不必担心服务不可用。

     *  *无法轻易改变服务。*这是主要的缺点。由于绑定发生在编译时间，任何时候你想要改变服务，都得重新编译游戏并重启游戏。

 *  **在运行时设置：**

    在卡其色衣物覆盖的事业商业单位，如果你说“服务定位器”，这就是他们脑中的东西。当服务被请求时，定位器在运行时做一些<span name="reflection">魔法般</span>的事情来追踪请求的真实实现。

    <aside name="reflection">

    *反射*是一些编程语言在运行时与类型系统打交道的能力。举个例子，我们可以用名字找到类，找到它的构造器，然后用它创建实例。

    像Lisp，Smalltalk和Python这样的动态类型语言自然有这样的特性，但新的静态语言比如C#和Java同样支持它。

    </aside>

    典型的，这意味着加载设置文件，确认提供者，然后使用反射说明运行中的类。这为我们做了一些事情：

     *  *我们可以换出服务而无需重新编译。*这比编译时绑定多了小小的灵活性，但是不像注册那样灵活，那里你可以真正的在运行游戏的时候改变服务。

     *  *非程序员也可改变服务。*这对想要在开关特定游戏特性的设计者是很好的，但清理源代码就不怎么舒服了。（或者，更可能的，*编程者*在设计者介入时就不舒服。）

     *  *同样的代码库可以同时支持多种设置。*由于定位处理被从代码库中完全移出，我们可以使用相同的代码来同时支持多种服务设置。

        这就是这个模型在企业网站上广泛应用的原因之一：你可以在不同的服务器上发布相同的应用，只需要修改设置。历史上看来，这在游戏中没什么用，因为主机硬件本身是好好标准化了的，但是对于很多目标是大杂烩的移动设备，这点就很有关系了。

     *  *复杂。*不像前面的解决方案，这个是重量级的。你得创建设置系统，也许要写代码来加载和粘贴文件，通常*要做些事情*来定位服务。花费在写这些代码上的时间就是没有花费在写其他游戏特性的时间。

     *  *加载服务需要时间。*现在笑脸要变成皱眉了。在运行时设置意味着你在消耗CPU循环加载服务。缓存可以最小化它，但是仍暗示在首次使用服务时，游戏需要暂停等点时间追上它。游戏开发者*讨厌*消耗CPU循环在不能提高游戏体验的地方。

### 如果服务不能被定位怎么办？

 *  **让用户处理它：**

    最简单的解决方案就是把责任退回去。如果定位器不能找到服务，只需返回`NULL`。这暗示着：

     *  *让用户决定如何掌控失败。*一些用户也许在收到找不到服务的关键错误时应该暂停游戏。其他的可能会安全地忽视并继续。如果定位器不能定义所有的政策对所有的情况都正确，那么就将失败传递下去，让每个调用点决定什么是正确的回应。

     *  *使用服务的用户必须处理失败。*当然，这个的必然结果是每个调用点都*必须*检查寻找服务的失败。如果它们都以相同方式来处理，在代码库中就有很多重复的代码。如果一百个中有一个忘了检查，我们的游戏就会崩溃。

 *  **挂起游戏：**

    我说过我们不能*保证*服务在编译时总是可用的，但是不意味着我们不能*声明*可用性是游戏定位器运行合约的一部分。做这点最简答的方法就是使用断言：

    ^code 4

    如果服务没有被找到，游戏停在试图使用它的后续代码之前。这里的<span name="assert">`assert()`</span>调用没有解决无法定位服务的问题，但是它确实明确了问题是什么。通过这里的断言，我们表明，“无法定位服务是定位器的漏洞。”

    <aside name="assert">

    如果你没见过，<a href="singleton.html" class="pattern">单例</a>模式一章中解释了`assert()`函数。

    </aside>

    那么这件事为我们做了什么呢？

     *  *用户不必处理缺失的服务。*由于简单的服务也许在成百上千的地方使用，这是节约了很多的代码。总能提供服务说明缺失是定位器的工作，我们节约了服务的用户处理它的精力。

     *  *如果服务没有找到，游戏会挂起。*在极小的可能性下，服务真的找不到，游戏就会挂起。强迫我们解决定位服务的漏洞是好事（比如一些本该调用的初始化代码没有被调用），但对被阻塞的所有人都会拖延到修复时。和大的开发团队工作，当这种事情发生时，你会增加痛苦的编程时间。

 *  **返回空服务：**

    我们在样例中实现中展示了这种修复。使用它意味着：

     *  *用户不必处理缺失的服务。*就像前面的选项一样，我们保证了可用的服务总是会被返回，简化了使用服务的代码。

     *  *如果服务不可用，游戏仍将继续。*这既有好处又有坏处。让我们在没有服务的情况下依然运行游戏是很有用的。在大团队中，当我们工作依赖的其他特性或者依赖的其他系统还没有就位时，这也是很有用的。

        缺点在于，较难为*无意*缺失的服务查找漏洞。假设游戏用服务去获取数据，然后基于数据做出决策。如果我们无法注册真正的服务，代码获得了空服务，游戏也许不会像期望的那样行动。<span name="null">花一些时间</span>在这个问题上，才能发现我们以为有的服务是不存在的。

        <aside name="null">

        我们可以让空服务被调用时打印一些debug信息来缓和这点。

        </aside>

在这些选项中，我看到最常使用的是简单的服务会被找到的断言。
在游戏发布的时候，它经历了严格的测试，它会在可信赖的硬件上运行。
无法找到服务的机会非常渺茫。

在更大的团队中，我鼓励你使用空服务。
这不会花太多时间实现，可以减少开发中服务不可用的缺陷。
这也给你了一个简单的方式去关闭服务，无论它是有漏洞还是干扰到了你真正工作的东西。

### 服务的服务范围有多大？

到了现在，我们假设定位器会提供服务给*任何*需要它的地方。
当让这是这个模式通常的使用方式，另一选项是局限到类和它的子类，就像这样：

^code 3

通过这些，对服务的接触被收缩到了继承`Base`的类。这两种各有千秋：

 *  **如果全局可获取：**

     *  *鼓励整个代码库使用同样的服务。*大多数服务都被设计成单一的。通过允许整个代码库接触到相同的服务，我们可以避免代码到处实例化提供者，因为他们不能获取“真正的”提供者。

     *  *我们失去了何时何地使用服务的控制权。*这是让某物全局化的明显代价——任何东西都能接触它。<a class="gof-pattern" href="singleton.html">单例</a>模式一章讲了全局变量可以多么糟糕的拖慢系统。

 *  **如果接触被限制在一个当中：**

     *  *我们控制耦合。*这是主要的优点。通过显式限制服务到继承树的分支，我们保证了应该解耦的系统保持解耦。

     *  *可能导致重复的付出。*潜在的缺点是如果一对无关的类*确实*需要接触服务，它们每一个都要拥有它的应用。无论是谁定位或者注册服务，它也需要在这些类之间复制。

        （另一个选项是改变类的继承层次，给这些类一个公共的基类，但也许这引起的麻烦多于收益。）

我的通用准则是，如果服务局限在游戏的一个领域中，那么限制它的工作范围在一个类上面。
举个例子，获取网络接口的服务可能限制于在线类中。
像日志这样更加广泛应用的服务应该是全局的。

## 参见

 *  服务定位模式在很多方面是<a class="gof-pattern" href="singleton.html">单例</a>模式的兄弟，在应用前看看两者哪个更适合你的需求是很值得的。

 *  [Unity](http://unity3d.com)框架在它的[`GetComponent()`][get-component]方法中使用这个模式协调它的<a href="component.html" class="pattern">组件</a>模式

 *  微软的[XNA][]游戏开发框架在它的核心`Game`类中内建了这种模式。每个实体都有一个`GameServices`对象可以用来注册和定位任何种类的服务。

[get-component]: http://docs.unity3d.com/412/Documentation/ScriptReference/Component.GetComponent.html?from=index
[xna]: http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.game.services.aspx

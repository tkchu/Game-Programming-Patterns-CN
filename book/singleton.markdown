^title 单例
^section 重访设计模式

这个章节不同寻常。
这本书其他章节展示如何使用一个设计模式。
这个章节向你展示如何*不*使用一个设计模式。

不管它高贵的意图，GoF描述的<a class="gof-pattern" href="http://c2.com/cgi/wiki?SingletonPattern">单例模式</a>带来的坏处通常多于好处。
他们强调这个模式应该谨慎使用，但是这个消息经常消失在<span name="instance">游戏业界</span>的传播途中。

就像其他模式一样，在不合适的地方使用单例模式就好像用夹板处理子弹伤口。
由于它是如此的滥用，这章的大部分都在讲如何*回避*单例模式，
但首先，让我们浏览一遍模式本身。

<aside name="instance">

当业界从C迁移到面向对象的语言，他们遇到的一个问题是“如何获取实例？”
他们有他们要调用的方法，但是没有对象的实例听方法。
单例（换言之，全局化）是一条简单的路。

</aside>

## 单例模式

*设计模式*像这样总结单例模式：

> 保证类只有一个实例，并提供全局接入点来获得它。

我们从“并”分割这个句子，分别考虑每一部分。

### 限制类只有一个实例

有时候，如果有超过一个实例，类不能正确的运行。
通常情况是类与保存全局状态的外部系统互动。

考虑包裹了潜在文件系统的API。
因为文件操作需要一段时间完成，类异步完成操作。
这就意味着多个操作可以同时运行，所以它们必须相互协调。
如果一个调用创建文件，另一个删除同一文件，包装器需要同时考虑两个来保证它们没有相互妨碍。

为了做到这点，对我们包装器的调用需要接触之前的每个操作。
如果用户可以自由的创建类的实例，实例无法知道另一实例之前的操作。
进入单例模式。它提供了一种方式构建类，在编译时保证类只有单一实例。

### 提供一个全局接入点

游戏中的不同系统都会使用文件系统包装类：日志，内容加载，游戏状态保存，等等。
如果这些系统不能创建它们自己的文件系统包装实例，它们如何获取呢？

单例为这个也提供了解决方案。
创建单一实例以外，它也提供了一种全局获得它的方法。
这种范式，无论何处何人都可以得到祝福的实例。
全部加起来，类经典的实现如下：

^code 1

静态的`instance_`成员保存了一个类的实例，
私有的构造器保证了它是*唯一*的。
公开的静态方法`instance()`让代码的任何地方都能获取实例。
它同样负责在第一个有人请求的时候才惰性实例化单例。

一个现代的实现看起来是这样的：

^code local-static

C++11<span name="thread">保证了</span>本地静态变量只会运行一次，
哪怕是同时发生的情况下。
因此，假设你有一个现代C++编译器，这个代码是线程安全的。而第一个例子不是。

<aside name="thread">

淡然，你单例类本身的线程安全是完全不同的问题！这只保证了它的*初始化*没问题。

</aside>

## 为什么我们使用它

这看起来已经决出了优胜者。
文件系统包装类在我们需要的地方到处可用，而无需沉重的将它到处传递。
类本身明确保证不会实例化多个实例。它还有很多其他的好性质：

*   **如果没人用，就不必创建实例。**节约内存和CPU循环总是好的。由于单例只在第一次被使用时实例化，如果游戏永远不请求，那么它不会被实例化。

*   **它在运行时实例化。**通常的单例模式是有着静态成员变量的类。我喜欢简单的解决方案，因此我尽可能使用静态类而不是单例，但是静态成员有一个限制：自动初始化。编译器在`main()`调用前初始化静态变量。这就意味着不能使用在程序加载并运行的信息（举个例子，从文件加载的配置）。这也意味着它们不能可靠地依赖彼此——编译器没有保证以什么样的顺序初始化静态变量。

    惰性初始化解决了以上两个问题。单例会尽可能晚的初始化，所以那时它需要的所有信息都应该可用了。只要它们没有环状依赖，一个单例在初始化它自己的时候甚至可以引用另一个单例。

*   **可将单例作为子类。**这是个很有用但通常过度了的能力。假设我们需要文件系统包装类跨平台。为了使之工作，我们需要它成为文件系统抽象出来的接口，有子类为每个平台实现接口。这里是基类：

    ^code 2

    然后我们为一堆平台定义子类。

    ^code derived-file-systems

    下一步，我们把`FileSystem`变成一个单例：

    ^code 3

    灵巧之处在于实例是如何被创建的。

    ^code 4

    通过一个简单的编译器switch，我们把文件系统包装类绑定到合适的具体类型上。整个代码库都可以使用`FileSystem::instance()`接触到文件系统，而无需和任何平台特定的代码耦合。耦合发生在为特定平台写的`FileSystem`类实现文件中。

这满足了我们解决问题时大多数需要的程度。
我们有一个文件系统包装类。
它工作可靠，它全局有效，只要需要就能获得。
是时候签入代码然后用美味饮料庆祝了。

## 为什么我们不要使用它

短期来看，单例模式是相对良性的。
就像其他设计选择一样，我们需要从长期考虑。
一旦我们将一些不必要的单例写进代码，就会给自己带来的麻烦：

### 它是一个全局变量

当游戏还是由几个家伙在车库中完成时，榨干硬件比象牙塔里的软件工程原则更重要
老式的C和汇编程序员能毫无问题的使用全局变量和静态变量，并发布好游戏。
随着游戏变得越来越大，越来越复杂，建构和管理开始变成瓶颈，
我们发布游戏的挣扎，不仅因为硬件限制，而且因为*生产力*限制。

所以我们迁移到了像C++这样的语言，开始将一些从软件工程师前辈那里学到的智慧应用于实际。我们学到的一课就是有很多原因导致全局变量不好：

*   **理解代码更加困难。**假设我们在查找其他人写的函数中的漏洞。如果函数没有碰到任何全局状态，我们可以让脑子围着它转，只需搞懂<span name="pure">函数</span>和传给函数的变量。

    <aside name="pure">

    计算机科学家称不接触或修改全局状态的函数为“纯”函数。纯函数易于理解，易于编译器优化，让你完成优雅的任务，比如记住缓存的情况并继续上次函数调用。

    完全使用纯函数是有难度的，但其好处足以引诱科学家创造像Haskell这样*只*允许纯函数的语言。

    </aside>

    现在考虑在函数中间是个对`SomeClass::getSomeGlobalData()`的调用。为了查明发生了什么，得追踪整个代码库来看看什么修改了全局数据。你真的不需要讨厌全局变量，直到你在凌晨三点使用`grep`搜索数百万行代码，搞清楚哪一个错误的调用将一个静态变量设为了错误的值。

*   **激励耦合。**团队的新程序员也许不熟悉游戏的完美管理，松散耦合的架构，但还是刚刚获得了第一个任务：在岩石撞击地面时播放一段声音。你我都知道这不需要将物理和*音频*代码耦合，但是他只想着把他的任务完成。不幸的是，我们的`AudioPlayer`是全局可见的。所以之后一个小小的`#include`，我们的新队员就连累 了整个精心设计的架构。

    不用音频播放器的全局实例，哪怕它*确实*`#include`头文件，它还是不能做任何事情。这种难度给它发送了一个明确的信号，这两个模块不应该知道对方，at需要找另外的方式来解决问题。*通过控制对实例的访问，你控制了耦合。*

*   **非并行友好。**那些一个简单的单核CPU上运行游戏的日子已经远去。现代的代码至少应考虑使用多线程的方式*工作*，哪怕它完全不需要并行的优势。当我们将某些东西转为全局时，我们创建了一块每个线程都能看到并接触到的内存，不管它们知道不知道其他线程正在使用那块内存。这种方式带来了死锁，竞争状态，以及其他很难解决的线程同步问题。

像这样的问题足够吓阻我们声明全局变量了，
同理单例模式也是一样，但是那还没有告诉我们*应该*如何设计游戏。
怎样构建游戏而无需全局变量？

有很广泛的对这个问题的回答（这本书的大部分都*是*关于这一点的），
但是它们既不明显也不能轻易获取。
与此同时，我们得发布游戏。
单例模式看起来是万能药。
这是在一本关于面向对象设计模式的书中，因此它*必须*有施工的声音，对吧？
这让我们以做了多年的方式设计软件。

不幸的是，这不是解药，这是安慰剂。
如果你浏览全局变量造成的问题列表，你会注意到单例模式解决不了任何一个。
这是因为单例*是*全局状态——它只是被封装在一个类中。

### 它能在你只有一个问题的时候解决两个

在GoF的对单例的描述中，“并”这个词有点奇怪。
这个模式是一个问题还是两个问题的解决方案
？如果我们只有其中一个问题呢？
保证单一的实例是有用的，但是谁告诉我们要让*每个人*都能接触到它？
同样，全局接触很方便，但是一个类不允许多个实例是对的么？

两问题中的后者，方便地获取，是我们使用单例模式几乎全部的原因。
考虑日志类。大部分模块都能从记录诊断性日志中获益。
但是，如果将`Log`类的实例传给每个需要这个方法的函数，那就混杂了产生的数据，模糊了代码的意图。

明显的解决方案是让`Log`类成为单例。
每个可以直接接触类的函数获得一个实例。
但当我们这样做时，我们无意地制造了一个奇怪的小约束。
突然之间，我们不再能创建超过一个日志记录者了。

最开始的时候，这不是一个问题。
我们写一个单独的日志文件，所以只需要一个实例。
然后，在开发循环的深处，我们遇到了麻烦。
每个团队的成员都使用日志记录各自的诊断信息，日志文件大量倾泻在地上。
程序员为了找到关心的一个入口点，需要翻过很多页代码。

我们想将日志分散到多个文件中来解决这点。
为了做到这点，我们为游戏不同的<span name="worse">领域</span>创造分散的日志记录者：
在线部分，UI，声音，游戏玩法。
但是我们不能，不仅仅因为`Log`类不再允许我们创建多个实例，
设计限制保证每个使用它的都是单一调用：

    Log::instance().write("Some event.");

为了让`Log`类支持多个实例（就像它原来的那样），
我们需要修改类和提及它的每一行代码。
我们的方便获取就不再那么方便了。

<aside name="worse">

这可能更糟。想象一下你的`Log`类是在多个*游戏*间共享的类。
现在，为了改变设计，需要在多组人之间协调改变，
他们中的大多数既没有时间，也没有动机修复它。

</aside>

### 惰性初始化从你那里剥夺了控制权

拥有虚拟内存和软性性能需求的桌面电脑世界中，惰性初始化是一个小技巧。
游戏则是另一中生物。初始化系统需要消耗时间：分配内存，加载资源，等等。
如果初始化音频系统消耗了几百个毫秒，我们需要控制它发生的时间。
如果在第一次声音播放时惰性初始化它自己，这可能是在动作部分的中间，导致可见的掉帧和断续的游戏体验。

同样，游戏通常需要严格控制在堆上分配的内存来避免<span name="fragment">碎片</span>。
如果音频系统在初始化时分配到了堆上，我们需要知道*何时*初始化发生了，
这样我们可以控制内存会待在堆的*哪里*。

<aside name="fragment">

<a class="pattern" href="object-pool.html">对象池</a>中有内存碎片的扩展细节。

</aside>

因为这两个原因，我见到的大多数游戏都不依赖惰性初始化。
相反，它们像这样实现单例模式：

^code 5

这解决了惰性初始化问题，但是损失了几个单例*确实*比原生的全局变量优良的特性。
通过静态实例，我们不能使用多态，类也必须是在静态初始化时就可以构建的。
我们也不能在不需要的时候释放实例使用的的内存。

不是创建一个单例，而是真正有一个简单的静态类。
这不是坏事，但是如果静态类是你需要的，
<span name="static">为什么不</span>完全摆脱`instance()`方法，
直接使用静态函数呢？调用`Foo::bar()`比`Foo::instance().bar()`更简单，
也更明确地表明你在处理静态内存。

<aside name="static">

使用单例而不是静态类的论点是，
如果你后来决定将静态类改为非静态的，你需要修复每一个调用点。
理论上，用单例就不必那么做，以为你可以将实例传来传去，像正常实例方法一样使用。

实践中，我从没看到这样的情况。
每个人都在一行写下`Foo::instance().bar()`。
如果我们将Foo改成单例，我们还是得修改每一个调用点。
鉴于此，我更喜欢简单的类和简单的调用语法。

</aside>

## 我们可以做什么来替代

如果我现在达到了目标，你就会在下次遇到问题使用单例模式之前三思而后行。
但是你还是有问题需要解决。
你*应该*使用什么工具呢？
取决于你在试图做什么，我有一些你可以考虑的选项，但是首先……

### 看看你是不是真正的需要类

我在游戏中看到的很多单例类都是“管理器”——那些类存在的意义就是照顾其他对象。
我看到代码库中似乎*所有*类都有管理器：
怪物，怪物管理器，粒子，粒子管理器，声音，声音管理器，管理管理器的管理器。
更多情况下，它们有时会在那里放“系统”或“引擎”，但是思路还是一样的。

小心处理类有时是有用的，
通常它们只是反映对OOP的不熟悉。思考这两个特制的类：

^code 8

也许这个例子有些蠢，但是我见过很多代码，在扫去细节后是一样的设计。
如果你看看这个代码，`BulletManager`很自然应是一个单例。
无论如何，任何有`Bullet`的都需要管理，而你需要多少`BulletManager`实例呢？

事实上，这里的答案是*零*。
这是我们如何为管理类解决“单例”问题：

^code 9

好了。没有管理员，没问题。
糟糕设计的单例通常“帮助”另一个类增加代码。
如果你可以的话，把所有的行为都移到类中。
无论如何，OOP是关于让对象照顾好他自己。

但是在管理器之外，还有其他问题我们需要寻求单例解决。
对于每种问题，都有一些后续方案来考虑。

### 将一个类限制到一个单一的实例

这是单例模式给你的一半东西。
就像在文件系统的例子中那样，保证一个类只有一个实例是很重要的。
但是，这不意味着我们需要*公开*提供对那个实例的*全局*访问。
我们想要减少对某部分代码的公开部分，
甚至让它在一个类中是<span name="wrapper">私有的</span>。
在这些情况下，提供一个全局接触点消弱了架构。

<aside name="wrapper">

举个例子，我们也许想把我们的文件系统包在*另一*层抽象中。

</aside>

我们想要一种方式保证只有一个实例而*无需*提供全局接触。
有好几种方法能行。这是其中之一：

<span name="assert"></span>

^code 6

这个类允许任何人构建它，如果你试图构建超过一个实例，它会断言并失败。
只要正确的代码首先创建了实例，那么就得保证没有其他代码可以接触实例或者创建它们自己的实例。这个类保证了它关注的单一实例需求，但是它没有指定类该如何被使用。

<aside name="assert">

*断言*函数是一种向你的代码中添加限制的方法。
当`assert()`被调用时，它计算传入的表达式。
如果结果为`true`，那么什么都不做，游戏继续。
如果结果为`false`，它立刻停止游戏。
在debug build时，这通常会启动漏洞处理器，或至少打印断言失败的文件和行号。

`assert()`表示，
“我断言这个总该是真的。如果不是，那就是漏洞，我想*立刻*停止来处理它。”
这样你在代码区域之间电议约束。
如果函数断言它的一个参数不能为`NULL`，那就是说，“我和调用者之间的协议是，我不会被传入`NULL`。”

断言帮助我们在游戏做出预期以外的事时立刻追踪漏洞，
而不是在错误最终显现在某些用户可见的事物上。
它们是代码中的栅栏，围住漏洞，这样漏洞就不能从制造它的代码边逃开。

</aside>

这个实现的缺点是只在*运行时*检查并防止多个实例化。
单例模式，正相反，通过类的自然结构，在编译时就确定单一实例。

### 为了给一个实例提供方便的获取方法

方便的获取是我们使用单例的一个主要原因。
这让我们在不同地方获取需要的对象更加容易。
这种轻松是需要代价的——在我们*不想*要对象的地方，也能很容易地使用。

通用原则是在能完成工作的同时，将变量写得尽可能局部。
对象影响的范围越小，我们在处理它的时候就需要把越少东西放在脑子里。
在我们拿起有*全局*范围影响的单例对象猎枪时，
让我们考虑考虑代码中其他获取对象的方式：

 *  **传进来。**<span name="di">最简单的</span>解决办法，通常也是最好的，把你需要的对象简单的作为参数传给需要它的函数。在用其他更加繁杂的方法前，考虑一下这个解决方案。

    <aside name="di">

    有些人使用术语“依赖注入”来指代它。不是代码*出来*调用某些全局量来确认它的依赖，而是依赖通过参数被*传入*到需要它的代码中去。其他人将“依赖注入”保留给为代码提供依赖的更复杂的方式。

    </aside>

    考虑渲染对象的函数。为了渲染，它需要接触一个代表图形设备的对象，管理渲染状态。将其传给所有渲染函数是很自然的，通常是用一个参数，名字像`context`之类的。

    另一方面，游戏对象不属于方法的签名。举个例子，处理AI的函数可能也需要写<span name="aop">日志文件</span>，但是日志不是它的核心关注点。看到`Log`出现在它的参数列表中是很奇怪的事情，由于像这样的情况，我们需要考虑其他的选项。

    <aside name="aop">

    像日志这样撒布在代码库各处的是“cross-cutting concern”。小心的处理cross-cutting concern是一个持久的架构挑战，特别是在静态类型语言中。

    [Aspect-oriented
    programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming)被设计处理应对它们。

    </aside>

 *  **从基类中获得。**很多游戏架构有浅层但是广泛的继承层次，通常只有一层深。举个例子，你也许有`GameObject`基类，每个游戏中的敌人或者对象都继承它。使用这样的架构，很大一部分游戏代码会存在这些“子”推导类中。这就意味着这些类已经有了对同样事物的相同获取方法：它们的`GameObject`基类。我们可以利用这点：

    <span name="gameobject"></span>

    ^code 10

    这保证任何`GameObject`外部的东西都不能接触它的`Log`对象，但是每个推导的实体确实能使用`getLog()`。这种提供保护方法，让推导对象实现它们的模式，涵盖在<a class="pattern"
    href="subclass-sandbox.html">子类沙箱</a> 这章中。

    <aside name="gameobject">

    这提出了问题，“`GameObject`是怎样获得`Log`实例的？”一个简单的方案是让基类创建并拥有静态实例。

    如果你不想要基类做这样的角色，你可以土工初始化方法传入，或使用<a     class="pattern" href="service-locator.html">服务定位器</a>模式找到它。

    </aside>

 *  **从已经是全局的东西中获取。**移除*所有*全局状态的目标令人钦佩，但是并不实际。大多数代码库还有一些全局可用对象，比如一个代表了整个游戏状态的`Game`或`World`对象。

    我们可以让现有的全局对象捎带需要的东西，来减少全局变量类的数目。不让`Log`，`FileSystem`和`AudioPlayer`变成单例，而这样做：

    ^code 11

    这样，只有`Game`是全局可用的。需要到其他系统的函数得<span name="demeter">经过</span>它：

    ^code 12

    <aside name="demeter">

    纯粹主义者会声称这违反了Demeter法则。我则声称这比一大坨单例要好。

    </aside>

    如果，稍后，架构被改为支持多个`Game`实例（可能是为了流或者测试目的），`Log`，`FileSystem`，和`AudioPlayer`都不会被影响到——它们甚至不知道有什么区别。缺陷是，当然，更多的代码耦合到了`Game`中。如果一个类只是需要播放声音，为了获得音频播放器，我们的例子仍然要它知道游戏世界。

    我们通过混合方案解决这点。知道`Game`的代码可以直接从那里获得`AudioPlayer`。而不知道的代码，我们用上面描述的其他选项来提供`AudioPlayer`。

 *  **从服务定位器中获得。**目前为止，我们假设全局类是通常具体的类比如`Game`。另一种选项是定义一个类，存在的唯一目标就是为对象提供全局访问。这种常见的模式被称为<a class="pattern" href="service-locator.html">服务定位器</a>模式，有它单独的章节。

## 单例中还剩下什么

剩下的问题，何处我们*应该*使用真实的单例模式？
说实话，我从来没有在游戏中使用全部的GoF模式。
为了保证单一实例化，我通常简单的使用静态类。
如果这无效，我使用静态标识在运行时检测是不是只有一个实例被创建了。

<a class="pattern" href="subclass-sandbox.html">子类沙箱</a>模式通过分享状态，给实例以类访问权限而无需让其全局可用。
<a class="pattern" href="service-locator.html">服务定位器</a>模式*确实*让一个对象全局可用，但它给了你如何设置对象的更多自由度。
